1.檢查版本號
git --version

2.建立基本資訊
git config --global user.name your-name
git config --global user.email your-email

3.初始化倉庫
git init(產生.git)

4.檔案狀態
U -> UnTrack (未追蹤)

5.加入控管
git add 1.txt (U -> A) (Added)
git add . (全部add)


6.加入控管後
修改過後的檔案(A -> M) (Modify)
- 需要git add 確認

7.控管狀態
git status

8.檢查物件對應檔案狀態
git ls-files -s

9.檢查檔案內容(-p)跟型態(-t)
git cat-file -p d80088

10.控管後的刪除
- A -> D(deleted)
- git add 3.txt
- git restore 3.txt

11.將目前暫存區的檔案變動加入倉庫
git commit -m message

12.檢視目前的commit
git log

13.檢視目前分支(預設master)
git branch

#產生
git branch test
git checkout test

git checkout -b test(新增跟切換)

14.切換commit&branch
git checkout e33d09
git checkout master

15.合併分支
- master 合併其他分支
- git checkout master
- git merge test (merge = 合併)
- git branch -D test (-D = Delete)

16.合併失敗
- 選擇本分支/其他分支/兩個都保留
- git merge -- abort (取消合併)
- git add .
- git commit -m "合併修正完畢"

17.看所有commit紀錄
- git reflog
- git checkout commit-object

18.Reset指令(master->commit)
- git reset
- git reset --hard

19.加上雲端倉庫
- git remote add origin https://github.com/ImAries0325/0319-demo.git

20.推送到雲端倉庫
- git push -u origin master
- git push

21.檢視雲端倉庫url
- git remote -v
- origin https://github.com/ImAries0325/0319-demo.git (fetch)

22.複製專案
- git clone https://github.com/ImAries0325/0319-demo.git

23.加入暫存區的恢復 A->U (被控管->未被追蹤)
- git restore
- git restore --staged <filename>






### 常用指令

1.git init

2.git add .

3.git status

4.git commit

5.git log

6.git checkout branch/commit-object

7.git checkout . (恢復未add的變動)

8.git branch

9.git checkout -b branch-name

10.git merge branch-name(切換其他分支)

11.git reflog

12.git reset --hard commit-object

13.git reset --hard HEAD
  .git reset --hard 83081f

git reset --hard HEAD~1 (HEAD~1前一個commit)
git reset --hard 83081f

14.git pull
- 將雲端版本同步本地端